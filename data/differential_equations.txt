import numpy as np

def eq_0_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t)), exp(x_2(t))*sin(x_1(t))]
    x_1, x_2 = X
    return betas[0] * (np.sin(x_1)) + betas[1] * (np.exp(x_2)*np.sin(x_1))

def eq_0_1(X, betas, t):
    # dx_2/dt = [exp(x_2(t))/x_1(t), exp(x_1(t))]
    x_1, x_2 = X
    return betas[2] * (np.exp(x_2)/x_1) + betas[3] * (np.exp(x_1))

def system_0(X, betas, t):
    return np.array([eq_0_0(X, betas, t), eq_0_1(X, betas, t)])

def eq_1_0(X, betas, t):
    # dx_1/dt = [cos(x_2(t))]
    x_1, x_2 = X
    return betas[0] * (np.cos(x_2))

def eq_1_1(X, betas, t):
    # dx_2/dt = [cos(x_2(t)), exp(x_2(t))/x_1(t)]
    x_1, x_2 = X
    return betas[1] * (np.cos(x_2)) + betas[2] * (np.exp(x_2)/x_1)

def system_1(X, betas, t):
    return np.array([eq_1_0(X, betas, t), eq_1_1(X, betas, t)])

def eq_2_0(X, betas, t):
    # dx_1/dt = [exp(x_1(t)), x_2(t)]
    x_1, x_2 = X
    return betas[0] * (np.exp(x_1)) + betas[1] * (x_2)

def eq_2_1(X, betas, t):
    # dx_2/dt = [sin(x_2(t)), exp(x_1(t))]
    x_1, x_2 = X
    return betas[2] * (np.sin(x_2)) + betas[3] * (np.exp(x_1))

def system_2(X, betas, t):
    return np.array([eq_2_0(X, betas, t), eq_2_1(X, betas, t)])

def eq_3_0(X, betas, t):
    # dx_1/dt = [exp(x_1(t))*exp(-x_2(t)), cos(x_1(t))]
    x_1, x_2 = X
    return betas[0] * (np.exp(x_1)*np.exp(-x_2)) + betas[1] * (np.cos(x_1))

def eq_3_1(X, betas, t):
    # dx_2/dt = [exp(-x_1(t))*cos(x_2(t)), x_2(t)*cos(x_1(t))]
    x_1, x_2 = X
    return betas[2] * (np.exp(-x_1)*np.cos(x_2)) + betas[3] * (x_2*np.cos(x_1))

def system_3(X, betas, t):
    return np.array([eq_3_0(X, betas, t), eq_3_1(X, betas, t)])

def eq_4_0(X, betas, t):
    # dx_1/dt = [x_1(t)*cos(x_2(t)), x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*np.cos(x_2)) + betas[1] * (x_2)

def eq_4_1(X, betas, t):
    # dx_2/dt = [exp(x_2(t)), sin(x_2(t))]
    x_1, x_2 = X
    return betas[2] * (np.exp(x_2)) + betas[3] * (np.sin(x_2))

def system_4(X, betas, t):
    return np.array([eq_4_0(X, betas, t), eq_4_1(X, betas, t)])

