import numpy as np

def eq_0_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_1/x_2)

def eq_0_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1) + betas[3] * (x_2)

def system_0(X, betas, t):
    return np.array([eq_0_0(X, betas, t), eq_0_1(X, betas, t)])

def eq_1_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t), x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1/x_2) + betas[1] * (x_2)

def eq_1_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1) + betas[3] * (x_2)

def system_1(X, betas, t):
    return np.array([eq_1_0(X, betas, t), eq_1_1(X, betas, t)])

def eq_2_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_1)

def eq_2_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1/x_2)

def system_2(X, betas, t):
    return np.array([eq_2_0(X, betas, t), eq_2_1(X, betas, t)])

def eq_3_0(X, betas, t):
    # dx_1/dt = [x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1)

def eq_3_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[1] * (x_1/x_2) + betas[2] * (x_1)

def system_3(X, betas, t):
    return np.array([eq_3_0(X, betas, t), eq_3_1(X, betas, t)])

def eq_4_0(X, betas, t):
    # dx_1/dt = [x_2(t), x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2) + betas[1] * (x_1/x_2)

def eq_4_1(X, betas, t):
    # dx_2/dt = [x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1)

def system_4(X, betas, t):
    return np.array([eq_4_0(X, betas, t), eq_4_1(X, betas, t)])

def eq_5_0(X, betas, t):
    # dx_1/dt = [x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2)

def eq_5_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[1] * (x_1/x_2) + betas[2] * (x_1)

def system_5(X, betas, t):
    return np.array([eq_5_0(X, betas, t), eq_5_1(X, betas, t)])

def eq_6_0(X, betas, t):
    # dx_1/dt = [x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2)

def eq_6_1(X, betas, t):
    # dx_2/dt = [x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[1] * (x_2) + betas[2] * (x_1)

def system_6(X, betas, t):
    return np.array([eq_6_0(X, betas, t), eq_6_1(X, betas, t)])

def eq_7_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1) + betas[1] * (x_1*x_2)

def eq_7_1(X, betas, t):
    # dx_2/dt = [x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_2)

def system_7(X, betas, t):
    return np.array([eq_7_0(X, betas, t), eq_7_1(X, betas, t)])

def eq_8_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1/x_2) + betas[1] * (x_1)

def eq_8_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1) + betas[3] * (x_2)

def system_8(X, betas, t):
    return np.array([eq_8_0(X, betas, t), eq_8_1(X, betas, t)])

def eq_9_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1/x_2)

def eq_9_1(X, betas, t):
    # dx_2/dt = [x_1(t)]
    x_1, x_2 = X
    return betas[1] * (x_1)

def system_9(X, betas, t):
    return np.array([eq_9_0(X, betas, t), eq_9_1(X, betas, t)])

def eq_10_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2)

def eq_10_1(X, betas, t):
    # dx_2/dt = [x_2(t)]
    x_1, x_2 = X
    return betas[1] * (x_2)

def system_10(X, betas, t):
    return np.array([eq_10_0(X, betas, t), eq_10_1(X, betas, t)])

def eq_11_0(X, betas, t):
    # dx_1/dt = [x_2(t)/x_1(t), x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2/x_1) + betas[1] * (x_2)

def eq_11_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1/x_2)

def system_11(X, betas, t):
    return np.array([eq_11_0(X, betas, t), eq_11_1(X, betas, t)])

def eq_12_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t), x_2(t)/x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1/x_2) + betas[1] * (x_2/x_1)

def eq_12_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_2(t)/x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1*x_2) + betas[3] * (x_2/x_1)

def system_12(X, betas, t):
    return np.array([eq_12_0(X, betas, t), eq_12_1(X, betas, t)])

def eq_13_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_1/x_2)

def eq_13_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1*x_2) + betas[3] * (x_1)

def system_13(X, betas, t):
    return np.array([eq_13_0(X, betas, t), eq_13_1(X, betas, t)])

def eq_14_0(X, betas, t):
    # dx_1/dt = [x_2(t), x_2(t)/x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_2) + betas[1] * (x_2/x_1)

def eq_14_1(X, betas, t):
    # dx_2/dt = [x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1)

def system_14(X, betas, t):
    return np.array([eq_14_0(X, betas, t), eq_14_1(X, betas, t)])

def eq_15_0(X, betas, t):
    # dx_1/dt = [x_2(t), x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2) + betas[1] * (x_1*x_2)

def eq_15_1(X, betas, t):
    # dx_2/dt = [x_2(t), x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_2) + betas[3] * (x_1/x_2)

def system_15(X, betas, t):
    return np.array([eq_15_0(X, betas, t), eq_15_1(X, betas, t)])

def eq_16_0(X, betas, t):
    # dx_1/dt = [x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_2) + betas[1] * (x_1)

def eq_16_1(X, betas, t):
    # dx_2/dt = [x_2(t), x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_2) + betas[3] * (x_1*x_2)

def system_16(X, betas, t):
    return np.array([eq_16_0(X, betas, t), eq_16_1(X, betas, t)])

def eq_17_0(X, betas, t):
    # dx_1/dt = [x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1)

def eq_17_1(X, betas, t):
    # dx_2/dt = [x_1(t)]
    x_1, x_2 = X
    return betas[1] * (x_1)

def system_17(X, betas, t):
    return np.array([eq_17_0(X, betas, t), eq_17_1(X, betas, t)])

def eq_18_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_2)

def eq_18_1(X, betas, t):
    # dx_2/dt = [x_2(t), x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_2) + betas[3] * (x_1*x_2)

def system_18(X, betas, t):
    return np.array([eq_18_0(X, betas, t), eq_18_1(X, betas, t)])

def eq_19_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2)

def eq_19_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_2(t), x_2(t)]
    x_1, x_2 = X
    return betas[1] * (x_1/x_2) + betas[2] * (x_2)

def system_19(X, betas, t):
    return np.array([eq_19_0(X, betas, t), eq_19_1(X, betas, t)])

def eq_20_0(X, betas, t):
    # dx_1/dt = [x_2(t), x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2) + betas[1] * (x_1*x_2)

def eq_20_1(X, betas, t):
    # dx_2/dt = [x_2(t)/x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_2/x_1)

def system_20(X, betas, t):
    return np.array([eq_20_0(X, betas, t), eq_20_1(X, betas, t)])

def eq_21_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_2(t)/x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1) + betas[1] * (x_2/x_1)

def eq_21_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1*x_2)

def system_21(X, betas, t):
    return np.array([eq_21_0(X, betas, t), eq_21_1(X, betas, t)])

def eq_22_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_2)

def eq_22_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1*x_2)

def system_22(X, betas, t):
    return np.array([eq_22_0(X, betas, t), eq_22_1(X, betas, t)])

def eq_23_0(X, betas, t):
    # dx_1/dt = [x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1)

def eq_23_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[1] * (x_1*x_2) + betas[2] * (x_1/x_2)

def system_23(X, betas, t):
    return np.array([eq_23_0(X, betas, t), eq_23_1(X, betas, t)])

def eq_24_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_2)

def eq_24_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1) + betas[3] * (x_1/x_2)

def system_24(X, betas, t):
    return np.array([eq_24_0(X, betas, t), eq_24_1(X, betas, t)])

def eq_25_0(X, betas, t):
    # dx_1/dt = [x_2(t)/x_1(t), x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_2/x_1) + betas[1] * (x_1)

def eq_25_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1/x_2)

def system_25(X, betas, t):
    return np.array([eq_25_0(X, betas, t), eq_25_1(X, betas, t)])

def eq_26_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1) + betas[1] * (x_1*x_2)

def eq_26_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1) + betas[3] * (x_2)

def system_26(X, betas, t):
    return np.array([eq_26_0(X, betas, t), eq_26_1(X, betas, t)])

def eq_27_0(X, betas, t):
    # dx_1/dt = [x_2(t)/x_1(t), x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_2/x_1) + betas[1] * (x_1)

def eq_27_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1*x_2) + betas[3] * (x_1)

def system_27(X, betas, t):
    return np.array([eq_27_0(X, betas, t), eq_27_1(X, betas, t)])

def eq_28_0(X, betas, t):
    # dx_1/dt = [x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2)

def eq_28_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_2(t), x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[1] * (x_1/x_2) + betas[2] * (x_1*x_2)

def system_28(X, betas, t):
    return np.array([eq_28_0(X, betas, t), eq_28_1(X, betas, t)])

def eq_29_0(X, betas, t):
    # dx_1/dt = [x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1)

def eq_29_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[1] * (x_1) + betas[2] * (x_1*x_2)

def system_29(X, betas, t):
    return np.array([eq_29_0(X, betas, t), eq_29_1(X, betas, t)])

def eq_30_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2)

def eq_30_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_2(t)]
    x_1, x_2 = X
    return betas[1] * (x_1*x_2) + betas[2] * (x_2)

def system_30(X, betas, t):
    return np.array([eq_30_0(X, betas, t), eq_30_1(X, betas, t)])

def eq_31_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_1/x_2)

def eq_31_1(X, betas, t):
    # dx_2/dt = [x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1)

def system_31(X, betas, t):
    return np.array([eq_31_0(X, betas, t), eq_31_1(X, betas, t)])

def eq_32_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1/x_2)

def eq_32_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[1] * (x_1*x_2)

def system_32(X, betas, t):
    return np.array([eq_32_0(X, betas, t), eq_32_1(X, betas, t)])

def eq_33_0(X, betas, t):
    # dx_1/dt = [x_2(t), x_2(t)/x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_2) + betas[1] * (x_2/x_1)

def eq_33_1(X, betas, t):
    # dx_2/dt = [x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_2)

def system_33(X, betas, t):
    return np.array([eq_33_0(X, betas, t), eq_33_1(X, betas, t)])

def eq_34_0(X, betas, t):
    # dx_1/dt = [x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_2) + betas[1] * (x_1)

def eq_34_1(X, betas, t):
    # dx_2/dt = [x_2(t)/x_1(t), x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_2/x_1) + betas[3] * (x_1)

def system_34(X, betas, t):
    return np.array([eq_34_0(X, betas, t), eq_34_1(X, betas, t)])

def eq_35_0(X, betas, t):
    # dx_1/dt = [x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2)

def eq_35_1(X, betas, t):
    # dx_2/dt = [x_2(t)/x_1(t), x_2(t)]
    x_1, x_2 = X
    return betas[1] * (x_2/x_1) + betas[2] * (x_2)

def system_35(X, betas, t):
    return np.array([eq_35_0(X, betas, t), eq_35_1(X, betas, t)])

def eq_36_0(X, betas, t):
    # dx_1/dt = [x_2(t)/x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_2/x_1)

def eq_36_1(X, betas, t):
    # dx_2/dt = [x_2(t)]
    x_1, x_2 = X
    return betas[1] * (x_2)

def system_36(X, betas, t):
    return np.array([eq_36_0(X, betas, t), eq_36_1(X, betas, t)])

def eq_37_0(X, betas, t):
    # dx_1/dt = [x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1)

def eq_37_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_2(t)]
    x_1, x_2 = X
    return betas[1] * (x_1) + betas[2] * (x_2)

def system_37(X, betas, t):
    return np.array([eq_37_0(X, betas, t), eq_37_1(X, betas, t)])

def eq_38_0(X, betas, t):
    # dx_1/dt = [x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_2) + betas[1] * (x_1)

def eq_38_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1/x_2)

def system_38(X, betas, t):
    return np.array([eq_38_0(X, betas, t), eq_38_1(X, betas, t)])

def eq_39_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_1)

def eq_39_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1*x_2)

def system_39(X, betas, t):
    return np.array([eq_39_0(X, betas, t), eq_39_1(X, betas, t)])

def eq_40_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1) + betas[1] * (x_2)

def eq_40_1(X, betas, t):
    # dx_2/dt = [x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_2)

def system_40(X, betas, t):
    return np.array([eq_40_0(X, betas, t), eq_40_1(X, betas, t)])

def eq_41_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1) + betas[1] * (x_1*x_2)

def eq_41_1(X, betas, t):
    # dx_2/dt = [x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1)

def system_41(X, betas, t):
    return np.array([eq_41_0(X, betas, t), eq_41_1(X, betas, t)])

def eq_42_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_2)

def eq_42_1(X, betas, t):
    # dx_2/dt = [x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_2)

def system_42(X, betas, t):
    return np.array([eq_42_0(X, betas, t), eq_42_1(X, betas, t)])

def eq_43_0(X, betas, t):
    # dx_1/dt = [x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_2) + betas[1] * (x_1)

def eq_43_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1*x_2)

def system_43(X, betas, t):
    return np.array([eq_43_0(X, betas, t), eq_43_1(X, betas, t)])

def eq_44_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_1)

def eq_44_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_2(t)/x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1*x_2) + betas[3] * (x_2/x_1)

def system_44(X, betas, t):
    return np.array([eq_44_0(X, betas, t), eq_44_1(X, betas, t)])

def eq_45_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1/x_2) + betas[1] * (x_1)

def eq_45_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1*x_2)

def system_45(X, betas, t):
    return np.array([eq_45_0(X, betas, t), eq_45_1(X, betas, t)])

def eq_46_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2)

def eq_46_1(X, betas, t):
    # dx_2/dt = [x_2(t)/x_1(t), x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[1] * (x_2/x_1) + betas[2] * (x_1/x_2)

def system_46(X, betas, t):
    return np.array([eq_46_0(X, betas, t), eq_46_1(X, betas, t)])

def eq_47_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_1)

def eq_47_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1*x_2) + betas[3] * (x_2)

def system_47(X, betas, t):
    return np.array([eq_47_0(X, betas, t), eq_47_1(X, betas, t)])

def eq_48_0(X, betas, t):
    # dx_1/dt = [x_2(t)/x_1(t), x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2/x_1) + betas[1] * (x_1/x_2)

def eq_48_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1/x_2) + betas[3] * (x_1)

def system_48(X, betas, t):
    return np.array([eq_48_0(X, betas, t), eq_48_1(X, betas, t)])

def eq_49_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t), x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1/x_2) + betas[1] * (x_2)

def eq_49_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1*x_2) + betas[3] * (x_1)

def system_49(X, betas, t):
    return np.array([eq_49_0(X, betas, t), eq_49_1(X, betas, t)])

def eq_50_0(X, betas, t):
    # dx_1/dt = [x_2(t), x_2(t)/x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_2) + betas[1] * (x_2/x_1)

def eq_50_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1/x_2) + betas[3] * (x_1)

def system_50(X, betas, t):
    return np.array([eq_50_0(X, betas, t), eq_50_1(X, betas, t)])

def eq_51_0(X, betas, t):
    # dx_1/dt = [x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2)

def eq_51_1(X, betas, t):
    # dx_2/dt = [x_2(t)]
    x_1, x_2 = X
    return betas[1] * (x_2)

def system_51(X, betas, t):
    return np.array([eq_51_0(X, betas, t), eq_51_1(X, betas, t)])

def eq_52_0(X, betas, t):
    # dx_1/dt = [x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2)

def eq_52_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[1] * (x_1*x_2)

def system_52(X, betas, t):
    return np.array([eq_52_0(X, betas, t), eq_52_1(X, betas, t)])

def eq_53_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2)

def eq_53_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_2(t), x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[1] * (x_1/x_2) + betas[2] * (x_1*x_2)

def system_53(X, betas, t):
    return np.array([eq_53_0(X, betas, t), eq_53_1(X, betas, t)])

def eq_54_0(X, betas, t):
    # dx_1/dt = [x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2)

def eq_54_1(X, betas, t):
    # dx_2/dt = [x_2(t), x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[1] * (x_2) + betas[2] * (x_1*x_2)

def system_54(X, betas, t):
    return np.array([eq_54_0(X, betas, t), eq_54_1(X, betas, t)])

def eq_55_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1) + betas[1] * (x_2)

def eq_55_1(X, betas, t):
    # dx_2/dt = [x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1)

def system_55(X, betas, t):
    return np.array([eq_55_0(X, betas, t), eq_55_1(X, betas, t)])

def eq_56_0(X, betas, t):
    # dx_1/dt = [x_2(t), x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2) + betas[1] * (x_1/x_2)

def eq_56_1(X, betas, t):
    # dx_2/dt = [x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_2)

def system_56(X, betas, t):
    return np.array([eq_56_0(X, betas, t), eq_56_1(X, betas, t)])

def eq_57_0(X, betas, t):
    # dx_1/dt = [x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1)

def eq_57_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[1] * (x_1*x_2)

def system_57(X, betas, t):
    return np.array([eq_57_0(X, betas, t), eq_57_1(X, betas, t)])

def eq_58_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t), x_2(t)/x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1/x_2) + betas[1] * (x_2/x_1)

def eq_58_1(X, betas, t):
    # dx_2/dt = [x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1)

def system_58(X, betas, t):
    return np.array([eq_58_0(X, betas, t), eq_58_1(X, betas, t)])

def eq_59_0(X, betas, t):
    # dx_1/dt = [x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_2) + betas[1] * (x_1)

def eq_59_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_2(t)/x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1*x_2) + betas[3] * (x_2/x_1)

def system_59(X, betas, t):
    return np.array([eq_59_0(X, betas, t), eq_59_1(X, betas, t)])

def eq_60_0(X, betas, t):
    # dx_1/dt = [x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1)

def eq_60_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_2(t)/x_1(t)]
    x_1, x_2 = X
    return betas[1] * (x_1) + betas[2] * (x_2/x_1)

def system_60(X, betas, t):
    return np.array([eq_60_0(X, betas, t), eq_60_1(X, betas, t)])

def eq_61_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1) + betas[1] * (x_1*x_2)

def eq_61_1(X, betas, t):
    # dx_2/dt = [x_2(t)/x_1(t), x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_2/x_1) + betas[3] * (x_2)

def system_61(X, betas, t):
    return np.array([eq_61_0(X, betas, t), eq_61_1(X, betas, t)])

def eq_62_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1) + betas[1] * (x_2)

def eq_62_1(X, betas, t):
    # dx_2/dt = [x_2(t)/x_1(t), x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_2/x_1) + betas[3] * (x_2)

def system_62(X, betas, t):
    return np.array([eq_62_0(X, betas, t), eq_62_1(X, betas, t)])

def eq_63_0(X, betas, t):
    # dx_1/dt = [x_2(t)/x_1(t), x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2/x_1) + betas[1] * (x_1*x_2)

def eq_63_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1*x_2) + betas[3] * (x_1)

def system_63(X, betas, t):
    return np.array([eq_63_0(X, betas, t), eq_63_1(X, betas, t)])

def eq_64_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_2)

def eq_64_1(X, betas, t):
    # dx_2/dt = [x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1)

def system_64(X, betas, t):
    return np.array([eq_64_0(X, betas, t), eq_64_1(X, betas, t)])

def eq_65_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2)

def eq_65_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[1] * (x_1/x_2) + betas[2] * (x_1)

def system_65(X, betas, t):
    return np.array([eq_65_0(X, betas, t), eq_65_1(X, betas, t)])

def eq_66_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t), x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1/x_2) + betas[1] * (x_2)

def eq_66_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1/x_2)

def system_66(X, betas, t):
    return np.array([eq_66_0(X, betas, t), eq_66_1(X, betas, t)])

def eq_67_0(X, betas, t):
    # dx_1/dt = [x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1)

def eq_67_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[1] * (x_1/x_2)

def system_67(X, betas, t):
    return np.array([eq_67_0(X, betas, t), eq_67_1(X, betas, t)])

def eq_68_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t), x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1/x_2) + betas[1] * (x_2)

def eq_68_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1*x_2) + betas[3] * (x_2)

def system_68(X, betas, t):
    return np.array([eq_68_0(X, betas, t), eq_68_1(X, betas, t)])

def eq_69_0(X, betas, t):
    # dx_1/dt = [x_2(t)/x_1(t), x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2/x_1) + betas[1] * (x_2)

def eq_69_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1*x_2) + betas[3] * (x_2)

def system_69(X, betas, t):
    return np.array([eq_69_0(X, betas, t), eq_69_1(X, betas, t)])

def eq_70_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_1)

def eq_70_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1*x_2) + betas[3] * (x_1)

def system_70(X, betas, t):
    return np.array([eq_70_0(X, betas, t), eq_70_1(X, betas, t)])

def eq_71_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2)

def eq_71_1(X, betas, t):
    # dx_2/dt = [x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[1] * (x_2) + betas[2] * (x_1)

def system_71(X, betas, t):
    return np.array([eq_71_0(X, betas, t), eq_71_1(X, betas, t)])

def eq_72_0(X, betas, t):
    # dx_1/dt = [x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_2) + betas[1] * (x_1)

def eq_72_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1*x_2) + betas[3] * (x_1)

def system_72(X, betas, t):
    return np.array([eq_72_0(X, betas, t), eq_72_1(X, betas, t)])

def eq_73_0(X, betas, t):
    # dx_1/dt = [x_2(t)/x_1(t), x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_2/x_1) + betas[1] * (x_1)

def eq_73_1(X, betas, t):
    # dx_2/dt = [x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1)

def system_73(X, betas, t):
    return np.array([eq_73_0(X, betas, t), eq_73_1(X, betas, t)])

def eq_74_0(X, betas, t):
    # dx_1/dt = [x_2(t), x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2) + betas[1] * (x_1*x_2)

def eq_74_1(X, betas, t):
    # dx_2/dt = [x_2(t)/x_1(t), x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_2/x_1) + betas[3] * (x_1)

def system_74(X, betas, t):
    return np.array([eq_74_0(X, betas, t), eq_74_1(X, betas, t)])

def eq_75_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1/x_2) + betas[1] * (x_1)

def eq_75_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_2(t)/x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1*x_2) + betas[3] * (x_2/x_1)

def system_75(X, betas, t):
    return np.array([eq_75_0(X, betas, t), eq_75_1(X, betas, t)])

def eq_76_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1) + betas[1] * (x_1/x_2)

def eq_76_1(X, betas, t):
    # dx_2/dt = [x_2(t)/x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_2/x_1)

def system_76(X, betas, t):
    return np.array([eq_76_0(X, betas, t), eq_76_1(X, betas, t)])

def eq_77_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t), x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1/x_2) + betas[1] * (x_1*x_2)

def eq_77_1(X, betas, t):
    # dx_2/dt = [x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_2)

def system_77(X, betas, t):
    return np.array([eq_77_0(X, betas, t), eq_77_1(X, betas, t)])

def eq_78_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_1/x_2)

def eq_78_1(X, betas, t):
    # dx_2/dt = [x_2(t), x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_2) + betas[3] * (x_1*x_2)

def system_78(X, betas, t):
    return np.array([eq_78_0(X, betas, t), eq_78_1(X, betas, t)])

def eq_79_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t), x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2) + betas[1] * (x_2)

def eq_79_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1*x_2) + betas[3] * (x_1)

def system_79(X, betas, t):
    return np.array([eq_79_0(X, betas, t), eq_79_1(X, betas, t)])

def eq_80_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2)

def eq_80_1(X, betas, t):
    # dx_2/dt = [x_1(t)]
    x_1, x_2 = X
    return betas[1] * (x_1)

def system_80(X, betas, t):
    return np.array([eq_80_0(X, betas, t), eq_80_1(X, betas, t)])

def eq_81_0(X, betas, t):
    # dx_1/dt = [x_2(t)/x_1(t), x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_2/x_1) + betas[1] * (x_1)

def eq_81_1(X, betas, t):
    # dx_2/dt = [x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_2)

def system_81(X, betas, t):
    return np.array([eq_81_0(X, betas, t), eq_81_1(X, betas, t)])

def eq_82_0(X, betas, t):
    # dx_1/dt = [x_2(t)/x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_2/x_1)

def eq_82_1(X, betas, t):
    # dx_2/dt = [x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[1] * (x_2) + betas[2] * (x_1)

def system_82(X, betas, t):
    return np.array([eq_82_0(X, betas, t), eq_82_1(X, betas, t)])

def eq_83_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1) + betas[1] * (x_1/x_2)

def eq_83_1(X, betas, t):
    # dx_2/dt = [x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_1)

def system_83(X, betas, t):
    return np.array([eq_83_0(X, betas, t), eq_83_1(X, betas, t)])

def eq_84_0(X, betas, t):
    # dx_1/dt = [x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_2) + betas[1] * (x_1)

def eq_84_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_2(t), x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1/x_2) + betas[3] * (x_1*x_2)

def system_84(X, betas, t):
    return np.array([eq_84_0(X, betas, t), eq_84_1(X, betas, t)])

def eq_85_0(X, betas, t):
    # dx_1/dt = [x_2(t)/x_1(t), x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2/x_1) + betas[1] * (x_2)

def eq_85_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1) + betas[3] * (x_1*x_2)

def system_85(X, betas, t):
    return np.array([eq_85_0(X, betas, t), eq_85_1(X, betas, t)])

def eq_86_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1) + betas[1] * (x_1/x_2)

def eq_86_1(X, betas, t):
    # dx_2/dt = [x_2(t)/x_1(t), x_1(t)]
    x_1, x_2 = X
    return betas[2] * (x_2/x_1) + betas[3] * (x_1)

def system_86(X, betas, t):
    return np.array([eq_86_0(X, betas, t), eq_86_1(X, betas, t)])

def eq_87_0(X, betas, t):
    # dx_1/dt = [x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1*x_2)

def eq_87_1(X, betas, t):
    # dx_2/dt = [x_2(t)/x_1(t), x_2(t)]
    x_1, x_2 = X
    return betas[1] * (x_2/x_1) + betas[2] * (x_2)

def system_87(X, betas, t):
    return np.array([eq_87_0(X, betas, t), eq_87_1(X, betas, t)])

def eq_88_0(X, betas, t):
    # dx_1/dt = [x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1)

def eq_88_1(X, betas, t):
    # dx_2/dt = [x_2(t), x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[1] * (x_2) + betas[2] * (x_1*x_2)

def system_88(X, betas, t):
    return np.array([eq_88_0(X, betas, t), eq_88_1(X, betas, t)])

def eq_89_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t), x_2(t)/x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1/x_2) + betas[1] * (x_2/x_1)

def eq_89_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1/x_2)

def system_89(X, betas, t):
    return np.array([eq_89_0(X, betas, t), eq_89_1(X, betas, t)])

def eq_90_0(X, betas, t):
    # dx_1/dt = [x_2(t), x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2) + betas[1] * (x_1/x_2)

def eq_90_1(X, betas, t):
    # dx_2/dt = [x_2(t)/x_1(t), x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_2/x_1) + betas[3] * (x_2)

def system_90(X, betas, t):
    return np.array([eq_90_0(X, betas, t), eq_90_1(X, betas, t)])

def eq_91_0(X, betas, t):
    # dx_1/dt = [x_2(t), x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2) + betas[1] * (x_1*x_2)

def eq_91_1(X, betas, t):
    # dx_2/dt = [x_2(t)/x_1(t), x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_2/x_1) + betas[3] * (x_2)

def system_91(X, betas, t):
    return np.array([eq_91_0(X, betas, t), eq_91_1(X, betas, t)])

def eq_92_0(X, betas, t):
    # dx_1/dt = [x_1(t), x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1) + betas[1] * (x_2)

def eq_92_1(X, betas, t):
    # dx_2/dt = [x_1(t), x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1) + betas[3] * (x_2)

def system_92(X, betas, t):
    return np.array([eq_92_0(X, betas, t), eq_92_1(X, betas, t)])

def eq_93_0(X, betas, t):
    # dx_1/dt = [x_2(t), x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2) + betas[1] * (x_1/x_2)

def eq_93_1(X, betas, t):
    # dx_2/dt = [x_1(t)/x_2(t), x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1/x_2) + betas[3] * (x_2)

def system_93(X, betas, t):
    return np.array([eq_93_0(X, betas, t), eq_93_1(X, betas, t)])

def eq_94_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1/x_2) + betas[1] * (x_1)

def eq_94_1(X, betas, t):
    # dx_2/dt = [x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_2)

def system_94(X, betas, t):
    return np.array([eq_94_0(X, betas, t), eq_94_1(X, betas, t)])

def eq_95_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t), x_2(t)/x_1(t)]
    x_1, x_2 = X
    return betas[0] * (x_1/x_2) + betas[1] * (x_2/x_1)

def eq_95_1(X, betas, t):
    # dx_2/dt = [x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_2)

def system_95(X, betas, t):
    return np.array([eq_95_0(X, betas, t), eq_95_1(X, betas, t)])

def eq_96_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1/x_2)

def eq_96_1(X, betas, t):
    # dx_2/dt = [x_2(t)/x_1(t)]
    x_1, x_2 = X
    return betas[1] * (x_2/x_1)

def system_96(X, betas, t):
    return np.array([eq_96_0(X, betas, t), eq_96_1(X, betas, t)])

def eq_97_0(X, betas, t):
    # dx_1/dt = [x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_1/x_2)

def eq_97_1(X, betas, t):
    # dx_2/dt = [x_2(t)]
    x_1, x_2 = X
    return betas[1] * (x_2)

def system_97(X, betas, t):
    return np.array([eq_97_0(X, betas, t), eq_97_1(X, betas, t)])

def eq_98_0(X, betas, t):
    # dx_1/dt = [x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2)

def eq_98_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t), x_1(t)]
    x_1, x_2 = X
    return betas[1] * (x_1*x_2) + betas[2] * (x_1)

def system_98(X, betas, t):
    return np.array([eq_98_0(X, betas, t), eq_98_1(X, betas, t)])

def eq_99_0(X, betas, t):
    # dx_1/dt = [x_2(t)/x_1(t), x_1(t)/x_2(t)]
    x_1, x_2 = X
    return betas[0] * (x_2/x_1) + betas[1] * (x_1/x_2)

def eq_99_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t)]
    x_1, x_2 = X
    return betas[2] * (x_1*x_2)

def system_99(X, betas, t):
    return np.array([eq_99_0(X, betas, t), eq_99_1(X, betas, t)])

