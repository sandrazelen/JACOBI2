import numpy as np

def eq_0_0(X, betas, t):
    # dx_1/dt = [cos(x_2(t))*tan(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_2)*np.tan(x_3))

def eq_0_1(X, betas, t):
    # dx_2/dt = [exp(-x_1(t))*sin(x_2(t)), x_2(t)**2]
    x_1, x_2, x_3 = X
    return betas[1] * (np.exp(-x_1)*np.sin(x_2)) + betas[2] * (x_2**2)

def eq_0_2(X, betas, t):
    # dx_3/dt = [log(x_1(t))*cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (log(x_1)*np.cos(x_2))

def system_0(X, betas, t):
    return np.array([eq_0_0(X, betas, t), eq_0_1(X, betas, t), eq_0_2(X, betas, t)])

def eq_1_0(X, betas, t):
    # dx_1/dt = [x_3(t)**2/x_1(t), x_1(t)**2/cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3**2/x_1) + betas[1] * (x_1**2/np.cos(x_3))

def eq_1_1(X, betas, t):
    # dx_2/dt = [exp(x_3(t)), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_3)) + betas[3] * (np.exp(x_2))

def eq_1_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t))*exp(x_3(t)), x_2(t)/cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (np.exp(x_1)*np.exp(x_3)) + betas[5] * (x_2/np.cos(x_3))

def system_1(X, betas, t):
    return np.array([eq_1_0(X, betas, t), eq_1_1(X, betas, t), eq_1_2(X, betas, t)])

def eq_2_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t))*sin(x_3(t)), x_1(t)**2/x_2(t)**2]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)*np.sin(x_3)) + betas[1] * (x_1**2/x_2**2)

def eq_2_1(X, betas, t):
    # dx_2/dt = [sin(x_3(t))*cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.sin(x_3)*np.cos(x_2))

def eq_2_2(X, betas, t):
    # dx_3/dt = [cos(x_3(t))/tan(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.cos(x_3)/np.tan(x_1))

def system_2(X, betas, t):
    return np.array([eq_2_0(X, betas, t), eq_2_1(X, betas, t), eq_2_2(X, betas, t)])

def eq_3_0(X, betas, t):
    # dx_1/dt = [sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_3))

def eq_3_1(X, betas, t):
    # dx_2/dt = [x_3(t)/log(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (x_3/log(x_2))

def eq_3_2(X, betas, t):
    # dx_3/dt = [log(x_3(t))/tan(x_1(t)), x_1(t)**2]
    x_1, x_2, x_3 = X
    return betas[2] * (log(x_3)/np.tan(x_1)) + betas[3] * (x_1**2)

def system_3(X, betas, t):
    return np.array([eq_3_0(X, betas, t), eq_3_1(X, betas, t), eq_3_2(X, betas, t)])

def eq_4_0(X, betas, t):
    # dx_1/dt = [tan(x_3(t)), exp(x_1(t))/cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.tan(x_3)) + betas[1] * (np.exp(x_1)/np.cos(x_3))

def eq_4_1(X, betas, t):
    # dx_2/dt = [x_2(t)*log(x_1(t)), x_1(t)**2*cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_2*log(x_1)) + betas[3] * (x_1**2*np.cos(x_3))

def eq_4_2(X, betas, t):
    # dx_3/dt = [x_3(t)**2*log(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (x_3**2*log(x_1))

def system_4(X, betas, t):
    return np.array([eq_4_0(X, betas, t), eq_4_1(X, betas, t), eq_4_2(X, betas, t)])

def eq_5_0(X, betas, t):
    # dx_1/dt = [tan(x_2(t))*tan(x_3(t)), tan(x_3(t))/log(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.tan(x_2)*np.tan(x_3)) + betas[1] * (np.tan(x_3)/log(x_1))

def eq_5_1(X, betas, t):
    # dx_2/dt = [x_1(t)*x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_1*x_2)

def eq_5_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t)), exp(x_1(t))*tan(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.sin(x_1)) + betas[4] * (np.exp(x_1)*np.tan(x_2))

def system_5(X, betas, t):
    return np.array([eq_5_0(X, betas, t), eq_5_1(X, betas, t), eq_5_2(X, betas, t)])

def eq_6_0(X, betas, t):
    # dx_1/dt = [exp(x_3(t))*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_3)*np.sin(x_2))

def eq_6_1(X, betas, t):
    # dx_2/dt = [sin(x_2(t))*cos(x_1(t)), x_2(t)**2]
    x_1, x_2, x_3 = X
    return betas[1] * (np.sin(x_2)*np.cos(x_1)) + betas[2] * (x_2**2)

def eq_6_2(X, betas, t):
    # dx_3/dt = [exp(-x_3(t))*tan(x_2(t)), x_3(t)*exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(-x_3)*np.tan(x_2)) + betas[4] * (x_3*np.exp(x_2))

def system_6(X, betas, t):
    return np.array([eq_6_0(X, betas, t), eq_6_1(X, betas, t), eq_6_2(X, betas, t)])

def eq_7_0(X, betas, t):
    # dx_1/dt = [log(x_2(t))/tan(x_1(t)), sin(x_2(t))*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (log(x_2)/np.tan(x_1)) + betas[1] * (np.sin(x_2)*np.sin(x_3))

def eq_7_1(X, betas, t):
    # dx_2/dt = [exp(x_3(t)), exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_3)) + betas[3] * (np.exp(x_2))

def eq_7_2(X, betas, t):
    # dx_3/dt = [log(x_3(t))*sin(x_1(t)), x_2(t)**2*log(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (log(x_3)*np.sin(x_1)) + betas[5] * (x_2**2*log(x_1))

def system_7(X, betas, t):
    return np.array([eq_7_0(X, betas, t), eq_7_1(X, betas, t), eq_7_2(X, betas, t)])

def eq_8_0(X, betas, t):
    # dx_1/dt = [sin(x_1(t))*tan(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.sin(x_1)*np.tan(x_3))

def eq_8_1(X, betas, t):
    # dx_2/dt = [x_2(t)*exp(x_1(t)), x_2(t)**2/x_1(t)]
    x_1, x_2, x_3 = X
    return betas[1] * (x_2*np.exp(x_1)) + betas[2] * (x_2**2/x_1)

def eq_8_2(X, betas, t):
    # dx_3/dt = [cos(x_3(t)), exp(-x_1(t))*cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.cos(x_3)) + betas[4] * (np.exp(-x_1)*np.cos(x_2))

def system_8(X, betas, t):
    return np.array([eq_8_0(X, betas, t), eq_8_1(X, betas, t), eq_8_2(X, betas, t)])

def eq_9_0(X, betas, t):
    # dx_1/dt = [x_3(t)*tan(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3*np.tan(x_2))

def eq_9_1(X, betas, t):
    # dx_2/dt = [exp(-x_1(t))*tan(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (np.exp(-x_1)*np.tan(x_3))

def eq_9_2(X, betas, t):
    # dx_3/dt = [log(x_1(t))*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (log(x_1)*np.sin(x_3))

def system_9(X, betas, t):
    return np.array([eq_9_0(X, betas, t), eq_9_1(X, betas, t), eq_9_2(X, betas, t)])

def eq_10_0(X, betas, t):
    # dx_1/dt = [x_2(t)**2*log(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2**2*log(x_3))

def eq_10_1(X, betas, t):
    # dx_2/dt = [x_3(t)**2/tan(x_2(t)), x_2(t)*exp(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (x_3**2/np.tan(x_2)) + betas[2] * (x_2*np.exp(x_1))

def eq_10_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t)), log(x_1(t))/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_1)) + betas[4] * (log(x_1)/x_2)

def system_10(X, betas, t):
    return np.array([eq_10_0(X, betas, t), eq_10_1(X, betas, t), eq_10_2(X, betas, t)])

def eq_11_0(X, betas, t):
    # dx_1/dt = [x_3(t)**2*exp(-x_1(t)), sin(x_2(t))/tan(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3**2*np.exp(-x_1)) + betas[1] * (np.sin(x_2)/np.tan(x_3))

def eq_11_1(X, betas, t):
    # dx_2/dt = [x_2(t)**2*x_3(t)**2, x_3(t)*sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (x_2**2*x_3**2) + betas[3] * (x_3*np.sin(x_2))

def eq_11_2(X, betas, t):
    # dx_3/dt = [sin(x_2(t)), x_3(t)**2]
    x_1, x_2, x_3 = X
    return betas[4] * (np.sin(x_2)) + betas[5] * (x_3**2)

def system_11(X, betas, t):
    return np.array([eq_11_0(X, betas, t), eq_11_1(X, betas, t), eq_11_2(X, betas, t)])

def eq_12_0(X, betas, t):
    # dx_1/dt = [log(x_2(t))*cos(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (log(x_2)*np.cos(x_3))

def eq_12_1(X, betas, t):
    # dx_2/dt = [x_2(t)*sin(x_1(t)), tan(x_2(t))/x_1(t)**2]
    x_1, x_2, x_3 = X
    return betas[1] * (x_2*np.sin(x_1)) + betas[2] * (np.tan(x_2)/x_1**2)

def eq_12_2(X, betas, t):
    # dx_3/dt = [exp(x_3(t))*cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_3)*np.cos(x_1))

def system_12(X, betas, t):
    return np.array([eq_12_0(X, betas, t), eq_12_1(X, betas, t), eq_12_2(X, betas, t)])

def eq_13_0(X, betas, t):
    # dx_1/dt = [x_3(t)*exp(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3*np.exp(x_2))

def eq_13_1(X, betas, t):
    # dx_2/dt = [tan(x_3(t)), x_2(t)**2]
    x_1, x_2, x_3 = X
    return betas[1] * (np.tan(x_3)) + betas[2] * (x_2**2)

def eq_13_2(X, betas, t):
    # dx_3/dt = [sin(x_1(t))*tan(x_2(t)), x_2(t)*tan(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.sin(x_1)*np.tan(x_2)) + betas[4] * (x_2*np.tan(x_3))

def system_13(X, betas, t):
    return np.array([eq_13_0(X, betas, t), eq_13_1(X, betas, t), eq_13_2(X, betas, t)])

def eq_14_0(X, betas, t):
    # dx_1/dt = [cos(x_1(t))/x_3(t)**2, x_3(t)*tan(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.cos(x_1)/x_3**2) + betas[1] * (x_3*np.tan(x_2))

def eq_14_1(X, betas, t):
    # dx_2/dt = [log(x_1(t))*log(x_3(t)), tan(x_1(t))/sin(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (log(x_1)*log(x_3)) + betas[3] * (np.tan(x_1)/np.sin(x_2))

def eq_14_2(X, betas, t):
    # dx_3/dt = [log(x_1(t))*log(x_2(t)), tan(x_1(t))*tan(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (log(x_1)*log(x_2)) + betas[5] * (np.tan(x_1)*np.tan(x_3))

def system_14(X, betas, t):
    return np.array([eq_14_0(X, betas, t), eq_14_1(X, betas, t), eq_14_2(X, betas, t)])

def eq_15_0(X, betas, t):
    # dx_1/dt = [exp(-x_1(t))*log(x_2(t)), exp(x_2(t))*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(-x_1)*log(x_2)) + betas[1] * (np.exp(x_2)*np.sin(x_1))

def eq_15_1(X, betas, t):
    # dx_2/dt = [sin(x_2(t)), tan(x_3(t))/x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (np.sin(x_2)) + betas[3] * (np.tan(x_3)/x_2)

def eq_15_2(X, betas, t):
    # dx_3/dt = [log(x_1(t))*sin(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[4] * (log(x_1)*np.sin(x_3))

def system_15(X, betas, t):
    return np.array([eq_15_0(X, betas, t), eq_15_1(X, betas, t), eq_15_2(X, betas, t)])

def eq_16_0(X, betas, t):
    # dx_1/dt = [x_3(t)*exp(x_1(t)), exp(x_2(t))/x_1(t)**2]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3*np.exp(x_1)) + betas[1] * (np.exp(x_2)/x_1**2)

def eq_16_1(X, betas, t):
    # dx_2/dt = [sin(x_1(t))*tan(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.sin(x_1)*np.tan(x_2))

def eq_16_2(X, betas, t):
    # dx_3/dt = [x_2(t)**2*sin(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (x_2**2*np.sin(x_1))

def system_16(X, betas, t):
    return np.array([eq_16_0(X, betas, t), eq_16_1(X, betas, t), eq_16_2(X, betas, t)])

def eq_17_0(X, betas, t):
    # dx_1/dt = [x_3(t)**2/log(x_1(t)), exp(-x_1(t))*cos(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_3**2/log(x_1)) + betas[1] * (np.exp(-x_1)*np.cos(x_2))

def eq_17_1(X, betas, t):
    # dx_2/dt = [exp(x_2(t))*log(x_3(t))]
    x_1, x_2, x_3 = X
    return betas[2] * (np.exp(x_2)*log(x_3))

def eq_17_2(X, betas, t):
    # dx_3/dt = [exp(x_3(t)), sin(x_1(t))*tan(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_3)) + betas[4] * (np.sin(x_1)*np.tan(x_2))

def system_17(X, betas, t):
    return np.array([eq_17_0(X, betas, t), eq_17_1(X, betas, t), eq_17_2(X, betas, t)])

def eq_18_0(X, betas, t):
    # dx_1/dt = [exp(x_2(t))/log(x_1(t)), x_2(t)*x_3(t)]
    x_1, x_2, x_3 = X
    return betas[0] * (np.exp(x_2)/log(x_1)) + betas[1] * (x_2*x_3)

def eq_18_1(X, betas, t):
    # dx_2/dt = [x_2(t)]
    x_1, x_2, x_3 = X
    return betas[2] * (x_2)

def eq_18_2(X, betas, t):
    # dx_3/dt = [tan(x_3(t))/tan(x_2(t)), x_1(t)**2]
    x_1, x_2, x_3 = X
    return betas[3] * (np.tan(x_3)/np.tan(x_2)) + betas[4] * (x_1**2)

def system_18(X, betas, t):
    return np.array([eq_18_0(X, betas, t), eq_18_1(X, betas, t), eq_18_2(X, betas, t)])

def eq_19_0(X, betas, t):
    # dx_1/dt = [x_2(t)**2*exp(-x_1(t))]
    x_1, x_2, x_3 = X
    return betas[0] * (x_2**2*np.exp(-x_1))

def eq_19_1(X, betas, t):
    # dx_2/dt = [x_1(t)**2*x_3(t), x_3(t)**2*cos(x_1(t))]
    x_1, x_2, x_3 = X
    return betas[1] * (x_1**2*x_3) + betas[2] * (x_3**2*np.cos(x_1))

def eq_19_2(X, betas, t):
    # dx_3/dt = [exp(x_1(t)), x_3(t)**2/tan(x_2(t))]
    x_1, x_2, x_3 = X
    return betas[3] * (np.exp(x_1)) + betas[4] * (x_3**2/np.tan(x_2))

def system_19(X, betas, t):
    return np.array([eq_19_0(X, betas, t), eq_19_1(X, betas, t), eq_19_2(X, betas, t)])

