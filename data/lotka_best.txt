import numpy as np
from math import exp, sin


# Linear
def eq_0_0(X, betas, t):
    # dx_1(t)/dt = beta_0*(x_1) + beta_1*(x_1*x_2)
    x_1, x_2 = X
    return 0.66456169 * (x_1) -1.32990482 * (x_1) * (x_2)

def eq_0_1(X, betas, t):
    # dx_2(t)/dt = beta_2*(x_1*x_2) + beta_3*(x_2)
    x_1, x_2 = X
    return 1.00276767 * (x_1) * (x_2) -1.00277606 * (x_2)

def system_0(X, betas, t):
    return np.array([eq_0_0(X, betas, t), eq_0_1(X, betas, t)])


# Linear, exp
def eq_1_0(X, betas, t):
    # dx_1(t)/dt = beta_0*(x_1*exp(x_2)) + beta_1*(x_1*exp(-x_2))
    x_1, x_2 = X
    return -0.3648128 * ((x_1) * exp(x_2)) + 1.02648826 * ((x_1) * exp(-x_2))

def eq_1_1(X, betas, t):
    # dx_2(t)/dt = beta_2*(x_2*exp(x_1)) + beta_3*(x_2*exp(-x_1))
    x_1, x_2 = X
    return 0.14552001 * ((x_2) * exp(x_1)) - 1.18816778 * ((x_2) * exp(-x_1))

def system_1(X, betas, t):
    return np.array([eq_1_0(X, betas, t), eq_1_1(X, betas, t)])


# Linear, exp, sin
def eq_2_0(X, betas, t):
    # dx_1(t)/dt = beta_0*(exp(x_1)) + beta_1*(x_1*sin(x_2))
    x_1, x_2 = X
    return 0.22435 * exp(x_1) - 2.0193325 * (x_1) * sin(x_2)

def eq_2_1(X, betas, t):
    # dx_2(t)/dt = beta_2*(exp(x_1)*sin(x_2)) + beta_3*(x_2)
    x_1, x_2 = X
    return 0.25897976 * exp(x_1) * sin(x_2) - 0.87764368 * (x_2)

def system_2(X, betas, t):
    return np.array([eq_2_0(X, betas, t), eq_2_1(X, betas, t)])


# Linear, exp, sin, square
def eq_3_0(X, betas, t):
    # dx_1(t)/dt = dx_1(t)/dt = beta_0*(exp(x_1)*exp(x_2)) + beta_1*(exp(x_1))
    x_1, x_2 = X
    return -0.2150891  * exp(x_1)*exp(x_2) + 0.42905366 * (exp(x_1))

def eq_3_1(X, betas, t):
    # dx_2(t)/dt = beta_2*(x_1) + beta_3*(exp(-x_1)*exp(x_2))
    x_1, x_2 = X
    return 0.16077174 * (x_1) - 0.20305948 * exp(-x_1) * exp(x_2)

def system_3(X, betas, t):
    return np.array([eq_3_0(X, betas, t), eq_3_1(X, betas, t)])



# ### Generation 9 #0 | Error: 0.1321 | System: ['dx_1(t)/dt = beta_0*(x_1²/x_2²) + beta_1*(x_2²)', 'dx_2(t)/dt = beta_2*(cos(x_2)) + beta_3*(exp(-x_1)*exp(x_2))'] | Solved Parameters: [ 0.08623023 -1.11608739  0.56237071 -0.69114126]
