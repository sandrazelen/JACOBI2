import numpy as np
from math import exp, sin


# Linear / 'Score': 2.480977979559095e-05
def eq_0_0(X, betas, t):
    # dx_1(t)/dt = beta_0*(x_1*x_2)
    x_1, x_2, x_3 = X
    return -0.0002 * (x_1) * (x_2)

def eq_0_1(X, betas, t):
    # dx_2(t)/dt = beta_1*(x_1*x_2) + beta_2*(x_2)
    x_1, x_2, x_3 = X
    return 0.0002* (x_1) * (x_2) - 0.04 * (x_2)

def eq_0_2(X, betas, t):
    # dx_3(t)/dt = beta_3*(x_2)
    x_1, x_2, x_3 = X
    return 0.03999988 * (x_2)

def system_0(X, betas, t):
    return np.array([eq_0_0(X, betas, t), eq_0_1(X, betas, t), eq_0_2(X, betas, t)])


# Linear, exp / 'Score': 12.092309015956351
def eq_1_0(X, betas, t):
    # dx_1(t)/dt = beta_0*(x_2) + beta_1*(x_1*x_3)
    x_1, x_2, x_3 = X
    return 0.08424986 * (x_2) - 0.00096104 * (x_1) *  (x_3)

def eq_1_1(X, betas, t):
    # dx_2(t)/dt = beta_2*(x_2) + beta_3*(x_1*x_3)
    x_1, x_2, x_3 = X
    return -0.12371369 * (x_2) + 0.00095854 * (x_1) * (x_3)

def eq_1_2(X, betas, t):
    # dx_3(t)/dt = beta_4*(x_2) + beta_5*(x_1*exp(-x_2))
    x_1, x_2, x_3 = X
    return 0.03989038 * (x_2) + 0.01642087 * (x_1) * exp(-x_2)

def system_1(X, betas, t):
    return np.array([eq_1_0(X, betas, t), eq_1_1(X, betas, t), eq_1_2(X, betas, t)])


# Linear / 'Score': 2.768608813441673e-05
def eq_2_0(X, betas, t):
    # dx_1(t)/dt = beta_0*(x_1*x_2)
    x_1, x_2, x_3 = X
    return -0.0002 * (x_1) * (x_2)

def eq_2_1(X, betas, t):
    # dx_2(t)/dt = beta_1*(x_1*x_2) + beta_2*(x_2)
    x_1, x_2, x_3 = X
    return 0.0002* (x_1) * (x_2) - 0.04 * (x_2)

def eq_2_2(X, betas, t):
    # dx_3(t)/dt = beta_3*(x_2)
    x_1, x_2, x_3 = X
    return 0.03999988 * (x_2)

def system_2(X, betas, t):
    return np.array([eq_2_0(X, betas, t), eq_2_1(X, betas, t), eq_2_2(X, betas, t)])


# Linear, exp, sin, square / 'Score': 2.1675658792461113e-05
def eq_3_0(X, betas, t):
    # dx_1(t)/dt = beta_0*(x_1*x_2)
    x_1, x_2, x_3 = X
    return -0.0002 * (x_1) * (x_2)

def eq_3_1(X, betas, t):
    # dx_2(t)/dt = beta_1*(x_1*x_2) + beta_2*(x_2)
    x_1, x_2, x_3 = X
    return 0.0002* (x_1) * (x_2) - 0.04 * (x_2)

def eq_3_2(X, betas, t):
    # dx_3(t)/dt = beta_3*(x_2)
    x_1, x_2, x_3 = X
    return 0.03999988 * (x_2)

def system_3(X, betas, t):
    return np.array([eq_3_0(X, betas, t), eq_3_1(X, betas, t), eq_3_2(X, betas, t)])


# Linear, exp, sin, square, log / 'Score': 2.3724149015197448e-05
def eq_4_0(X, betas, t):
    # dx_1(t)/dt = beta_0*(x_1*x_2)
    x_1, x_2, x_3 = X
    return -0.0002 * (x_1) * (x_2)

def eq_4_1(X, betas, t):
    # dx_2(t)/dt = beta_1*(x_1*x_2) + beta_2*(x_2)
    x_1, x_2, x_3 = X
    return 0.0002* (x_1) * (x_2) - 0.04 * (x_2)

def eq_4_2(X, betas, t):
    # dx_3(t)/dt = beta_3*(x_2)
    x_1, x_2, x_3 = X
    return 0.03999988 * (x_2)

def system_4(X, betas, t):
    return np.array([eq_4_0(X, betas, t), eq_4_1(X, betas, t), eq_4_2(X, betas, t)])


# Linear, exp, sin, square, log, square / 'Score': 2.4766900571394205e-05
def eq_5_0(X, betas, t):
    # dx_1(t)/dt = beta_0*(x_1*x_2)
    x_1, x_2, x_3 = X
    return -0.0002 * (x_1) * (x_2)

def eq_5_1(X, betas, t):
    # dx_2(t)/dt = beta_1*(x_1*x_2) + beta_2*(x_2)
    x_1, x_2, x_3 = X
    return 0.0002* (x_1) * (x_2) - 0.04 * (x_2)

def eq_5_2(X, betas, t):
    # dx_3(t)/dt = beta_3*(x_2)
    x_1, x_2, x_3 = X
    return 0.03999988 * (x_2)

def system_5(X, betas, t):
    return np.array([eq_5_0(X, betas, t), eq_5_1(X, betas, t), eq_5_2(X, betas, t)])


# Linear, exp, sin, square, log, square, tan / 'Score': 98.65718225446972
def eq_6_0(X, betas, t):
    # dx_1(t)/dt = beta_0*(x_2*x_3) + beta_1*(x_1*x_3)
    x_1, x_2, x_3 = X
    return 4.03402700e-05 * (x_2) * (x_3) - 4.71973655e-04 * (x_1) * (x_3)

def eq_6_1(X, betas, t):
    # dx_2(t)/dt = beta_2*(x_2) + beta_3*(x_1*x_3)
    x_1, x_2, x_3 = X
    return -7.15714342e-02 * (x_2) + 5.81746517e-04 * (x_1) * (x_3)

def eq_6_2(X, betas, t):
    # dx_3(t)/dt = beta_4*(x_2) + beta_5*(x_1)
    x_1, x_2, x_3 = X
    return 3.88980418e-02 * (x_2) + 4.91404006e-04 *(x_1)

def system_6(X, betas, t):
    return np.array([eq_6_0(X, betas, t), eq_6_1(X, betas, t), eq_6_2(X, betas, t)])
